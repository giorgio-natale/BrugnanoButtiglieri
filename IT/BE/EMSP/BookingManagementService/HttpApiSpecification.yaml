openapi: 3.0.2
info:
  title: eMSP-BookingManagementService
  version: 1.0.0
  description: Api for eMSP-BookingManagementService
tags:
  - name: booking
    description: Booking operations
paths:
  '/customer/{customerId}/booking':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
          description: ''
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - Authenticated: []
      tags:
        - booking
      operationId: getAllBookings
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - Authenticated: []
      tags:
        - booking
      operationId: postBooking
    parameters:
      - name: customerId
        schema:
          format: int64
          type: integer
        in: path
        required: true
  '/customer/{customerId}/booking/{bookingCode}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - Authenticated: []
      tags:
        - booking
      operationId: getBooking
    parameters:
      - name: customerId
        schema:
          format: int64
          type: integer
        in: path
        required: true
      - name: bookingCode
        schema:
          format: int64
          type: integer
        in: path
        required: true
  '/customer/{customerId}/booking/{bookingCode}/status':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingStatus'
          description: ''
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - Authenticated: []
      tags:
        - booking
      description: ''
      operationId: getBookingStatus
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingStatus'
        required: true
      responses:
        '200':
          description: ''
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - Authenticated: []
      tags:
        - booking
      operationId: putBookingStatus
    parameters:
      - name: customerId
        schema:
          format: int64
          type: integer
        in: path
        required: true
      - name: bookingCode
        schema:
          format: int64
          type: integer
        in: path
        required: true
components:
  schemas:
    Timeframe:
      required:
        - startInstant
      type: object
      properties:
        startInstant:
          format: date-time
          type: string
        endInstant:
          format: date-time
          type: string
      example:
        startInstant: '2018-11-13T20:20:39+00:00'
        endInstant: '2018-11-13T20:20:39+00:00'
      x-examples:
        Example 1:
          startInstant: '2018-11-13T20:20:39+00:00'
          endInstant: '2018-11-13T20:20:39+00:00'
    SocketType:
      type: string
      enum:
        - SLOW
        - FAST
        - RAPID
      x-examples:
        Example 1: SLOW
    BookingType:
      type: string
      enum:
        - IN_ADVANCE
        - ON_THE_FLY
      example: IN_ADVANCE
      x-examples:
        Example 1: IN_ADVANCE
    BookingRequest:
      type: object
      required:
        - chargingStationId
        - customerId
      properties:
        customerId:
          format: int64
          type: integer
        chargingStationId:
          format: int64
          type: integer
      oneOf:
        - $ref: '#/components/schemas/BookingInAdvance'
        - $ref: '#/components/schemas/BookingOnTheFly'
      discriminator:
        propertyName: bookingType
      description: ''
      x-examples:
        Example 1:
          bookingType: IN_ADVANCE
          socketType: SLOW
          timeframe:
            startInstant: '2018-11-13T20:20:39+00:00'
            endInstant: '2018-11-13T20:20:39+00:00'
        Example 2:
          bookingType: BookingInAdvance
          socketType: SLOW
          timeframe:
            startInstant: '2018-11-13T20:20:39+00:00'
            endInstant: '2018-11-13T20:20:39+00:00'
    BookingInAdvance:
      required:
        - socketType
        - timeframe
        - bookingType
      type: object
      properties:
        bookingType:
          type: string
          x-discriminator: BookingInAdvance
        socketType:
          $ref: '#/components/schemas/SocketType'
        timeframe:
          $ref: '#/components/schemas/Timeframe'
      example:
        bookingType: BookingInAdvance
        socketType: SLOW
        timeframe:
          startInstant: '2018-11-13T20:20:39+00:00'
          endInstant: '2018-11-13T20:20:39+00:00'
      x-examples:
        Example 1:
          bookingType: BookingInAdvance
          socketType: SLOW
          timeframe:
            startInstant: '2018-11-13T20:20:39+00:00'
            endInstant: '2018-11-13T20:20:39+00:00'
    BookingOnTheFly:
      required:
        - bookingType
        - chargingPointId
        - socketId
      type: object
      properties:
        bookingType:
          type: string
          x-discriminator: BookingOnTheFly
        chargingPointId:
          format: int64
          description: ''
          type: integer
        socketId:
          format: int64
          description: ''
          type: integer
      example:
        bookingType: BookingOnTheFly
        chargingPointId: 1
        socketId: 1
      x-examples:
        Example 1:
          bookingType: BookingOnTheFly
          chargingPointId: 1
          socketId: 1
    BookingStatusCancelled:
      type: object
      required:
        - bookingStatus
      properties:
        bookingStatus:
          type: string
          x-discriminator: BookingStatusCancelled
      example:
        bookingStatus: BookingStatusCancelled
      x-examples:
        Example 1:
          bookingStatus: BookingStatusCancelled
    BookingStatusCompleted:
      type: object
      properties:
        bookingStatus:
          type: string
          x-discriminator: BookingStatusCompleted
      example:
        bookingStatus: BookingStatusCompleted
      x-examples:
        Example 1:
          bookingStatus: BookingStatusCompleted
    BookingStatusExpired:
      type: object
      example:
        bookingStatus: BookingStatusExpired
      required:
        - bookingStatus
      properties:
        bookingStatus:
          type: string
          x-discriminator: BookingStatusExpired
      x-examples:
        Example 1:
          bookingStatus: BookingStatusExpired
    BookingStatusInProgress:
      type: object
      properties:
        bookingStatus:
          type: string
          x-discriminator: BookingStatusInProgress
        expectedMinutesLeft:
          format: int32
          type: integer
      example:
        bookingStatus: BookingStatusInProgress
        expectedMinutesLeft: 1
      x-examples:
        Example 1:
          bookingStatus: BookingStatusInProgress
          expectedMinutesLeft: 1
    BookingStatusPlanned:
      type: object
      properties:
        bookingStatus:
          x-discriminator: BookingStatusPlanned
          type: string
      example:
        bookingStatus: BookingStatusPlanned
      x-examples:
        Example 1:
          bookingStatus: BookingStatusPlanned
    BookingStatus:
      oneOf:
        - $ref: '#/components/schemas/BookingStatusInProgress'
        - $ref: '#/components/schemas/BookingStatusPlanned'
        - $ref: '#/components/schemas/BookingStatusExpired'
        - $ref: '#/components/schemas/BookingStatusCancelled'
        - $ref: '#/components/schemas/BookingStatusCompleted'
      discriminator:
        propertyName: bookingStatus
      type: object
    Error:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          format: int32
          type: integer
        detail:
          type: string
        instance:
          type: string
      example:
        type: /errors/overlapping-booking-request
        title: Overlapping booking request
        status: 409
        detail: The requested booking timeframe overlaps with another planned booking.
        instance: /booking
    Booking:
      required:
        - bookingCode
        - bookingType
        - chargingPointId
        - chargingStationId
        - customerId
        - socketId
        - socketType
        - timeframe
      type: object
      properties:
        bookingCode:
          format: int64
          type: integer
          readOnly: true
        customerId:
          format: int64
          type: integer
        chargingStationId:
          format: int64
          type: integer
        chargingPointId:
          format: int64
          type: integer
        socketId:
          format: int64
          type: integer
        socketType:
          $ref: '#/components/schemas/SocketType'
        timeframe:
          $ref: '#/components/schemas/Timeframe'
        bookingType:
          $ref: '#/components/schemas/BookingType'
      example:
        bookingCode: 1
        customerId: 1
        chargingStationId: 1
        bookingType: IN_ADVANCE
        chargingPointId: 1
        socketId: 1
        socketType: SLOW
        timeframe:
          startInstant: '2018-11-13T20:20:39+00:00'
          endInstant: '2018-11-13T20:20:39+00:00'
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: ''
  securitySchemes:
    Authenticated:
      scheme: bearer
      type: http
servers:
  - url: 'http://booking-management-service'
    description: ''
