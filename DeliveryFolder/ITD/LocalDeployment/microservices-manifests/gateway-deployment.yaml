# deploy.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: apisix-gw-config.yaml
  namespace: papaia
data:
  config.yaml: |
    deployment:
      role: data_plane
      role_data_plane:
        config_provider: yaml
    apisix:
      router:
        http: radixtree_uri_with_parameter
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: apisix.yaml
  namespace: papaia
data:
  apisix.yaml: |
    global_rules:
      - id: 1
        plugins:
          cors:
            allow_origins: **
    consumers:
      - username: emsp_user
        plugins:
          jwt-auth:
            key: emsp-user-key
            secret: my-secret-token
      - username: cpms_user
        plugins:
          jwt-auth:
            key: cpms-user-key
            secret: my-super-secret-token
    routes:
      - uri: /health-check
        plugins:
          mocking: 
            content_type: text/plain
            response_status: 200
            response_example: OK
        upstream:
          nodes:
            "127.0.0.1:1980": 1            
          type: roundrobin
      - uris: 
          - /customer/:customerId/booking
          - /customer/:customerId/booking/*
          - /customer/:customerId/notificationInfo
        plugins: 
          jwt-auth: {}
        upstream:
          nodes:
            "booking-management-service.papaia": 1            
          type: roundrobin
      - uris:
          - /customer/login
        plugins: {}
        upstream:
          nodes:
            "customer-service.papaia": 1            
          type: roundrobin
      - uris:
          - /customer
          - /customer/*
        upstream:
          nodes:
            "customer-service.papaia": 1            
          type: roundrobin
      - uris:
          - /employee/login
        upstream:
          nodes:
            "employee-service.papaia": 1            
          type: roundrobin
      - uris:
          - /employee
          - /employee/*
        plugins: 
          jwt-auth: {}
        upstream:
          nodes:
            "employee-service.papaia": 1            
          type: roundrobin
      - uris: 
          - /booking
          - /booking/*
        plugins: 
          jwt-auth: {}
        upstream:
          nodes:
            "booking-service.papaia": 1            
          type: roundrobin 
      - uris: 
          - /chargingStation/:chargingStationId/status
          - /chargingStation/:chargingStationId/status/*
          - /chargingStation/:chargingStationId/chargingPoint/*
        plugins: 
          jwt-auth: {}
        upstream:
          nodes:
            "charging-management-service.papaia": 1            
          type: roundrobin 
      - uri: /*
        plugins: 
          jwt-auth: {}
        upstream:
          nodes:
            "mock-service.papaia": 1            
          type: roundrobin
    #END
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
  namespace: papaia
spec:
  replicas: 1
  selector:
    matchLabels:
      app: papaia
      app-component: api-gateway
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: papaia
        app-component: api-gateway
    spec:
      terminationGracePeriodSeconds: 0
      containers: 
        - livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            tcpSocket:
              port: 9080
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            tcpSocket:
              port: 9080
            timeoutSeconds: 2
          image: "apache/apisix:latest"
          imagePullPolicy: IfNotPresent
          name: apisix-deployment
          # Create a soft link to link the apisix.yaml file in the mount directory to /usr/local/apisix/conf/apisix.yaml.
          command: ["sh", "-c","ln -s /apisix-config/apisix.yaml /usr/local/apisix/conf/apisix.yaml && /docker-entrypoint.sh docker-start"]
          ports:
            - containerPort: 9080
              name: "http"
              protocol: "TCP"
            - containerPort: 9443
              name: "https"
              protocol: "TCP"
          volumeMounts:
            - mountPath: /usr/local/apisix/conf/config.yaml
              name: apisix-config-yaml-configmap
              subPath: config.yaml
            # configMap directory mounts
            - mountPath: /apisix-config
              name: apisix-admin
      volumes:
        - configMap:
            name: apisix-gw-config.yaml
          name: apisix-config-yaml-configmap
        - configMap:
            name: apisix.yaml
          name: apisix-admin
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: papaia
  annotations:
    cloud.google.com/backend-config: '{"default": "ingress-papaia-backendconfig"}'
spec:
  selector:
    app: papaia
    app-component: api-gateway
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 9080
    - name: https
      port: 9443
      protocol: TCP
      targetPort: 9443
  type: LoadBalancer